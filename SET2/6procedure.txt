CREATE TABLE Employee (
    emp_id INT PRIMARY KEY,
    dept_id INT,
    emp_name VARCHAR(50),
    DoJ DATE,
    salary DECIMAL(10, 2),
    commission DECIMAL(5, 2),
    job_title VARCHAR(50)
);

CREATE TABLE Department (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50),
    manager_name VARCHAR(50)
);

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title) VALUES
(1, 101, 'John Doe', '2005-06-15', 12000.00, NULL, 'Manager'),
(2, 102, 'Jane Smith', '2015-07-10', 8000.00, NULL, 'Developer'),
(3, 103, 'Alice Brown', '2010-03-25', 2500.00, NULL, 'Analyst'),
(4, 104, 'Bob White', '2012-09-12', 5000.00, NULL, 'Developer');

-- Sample data for Department table
INSERT INTO Department (dept_id, dept_name, manager_name) VALUES
(101, 'Sales', 'John Doe'),
(102, 'IT', 'Jane Smith'),
(103, 'Finance', 'Alice Brown'),
(104, 'HR', 'Bob White');

-- 1
DELIMITER //

CREATE PROCEDURE CalculateCommission()
BEGIN
    DECLARE emp_id INT;
    DECLARE salary DECIMAL(10, 2);
    DECLARE experience INT;
    DECLARE done INT DEFAULT FALSE;

    -- Cursor to select employee details
    DECLARE emp_cursor CURSOR FOR 
        SELECT emp_id, salary, TIMESTAMPDIFF(YEAR, DoJ, CURDATE()) AS experience
        FROM Employee;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN emp_cursor;

    emp_loop: LOOP
        FETCH emp_cursor INTO emp_id, salary, experience;

        IF done THEN
            LEAVE emp_loop;
        END IF;

        -- Update commission based on the specified conditions
        IF salary > 10000 THEN
            UPDATE Employee SET commission = 0.4 WHERE emp_id = emp_id;
        ELSEIF salary < 10000 AND experience > 10 THEN
            UPDATE Employee SET commission = 0.35 WHERE emp_id = emp_id;
        ELSEIF salary < 3000 THEN
            UPDATE Employee SET commission = 0.25 WHERE emp_id = emp_id;
        ELSE
            UPDATE Employee SET commission = 0.15 WHERE emp_id = emp_id;
        END IF;
    END LOOP;

    CLOSE emp_cursor;
END //

DELIMITER ;

-- 2
DELIMITER //

CREATE FUNCTION GetManagerName(dept_id INT) 
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
    DECLARE manager_name VARCHAR(50);

    -- Retrieve the manager's name for the given department ID, ensuring only one result
    SELECT manager_name INTO manager_name 
    FROM Department 
    WHERE dept_id = dept_id
    LIMIT 1;

    RETURN manager_name;
END //

DELIMITER ;

CALL CalculateCommission();

SELECT GetManagerName(101);
