-- Create the clientmstr table
CREATE TABLE clientmstr (
    client_id INT PRIMARY KEY,
    client_name VARCHAR(100),
    contact_number VARCHAR(15),
    email VARCHAR(100)
);

-- Create the audit_trade table
CREATE TABLE audit_trade (
    audit_id INT AUTO_INCREMENT PRIMARY KEY,
    client_id INT,
    old_client_name VARCHAR(100),
    old_contact_number VARCHAR(15),
    old_email VARCHAR(100),
    action_type VARCHAR(10),  -- 'UPDATE' or 'DELETE'
    action_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample client data into clientmstr table
INSERT INTO clientmstr (client_id, client_name, contact_number, email)
VALUES
(1, 'ABC Corp', '1234567890', 'abc@corp.com'),
(2, 'XYZ Ltd', '0987654321', 'xyz@ltd.com'),
(3, 'Global Solutions', '1112223333', 'global@solutions.com');

DELIMITER $$

-- Row-level trigger for updates
CREATE TRIGGER track_update_row
AFTER UPDATE ON clientmstr
FOR EACH ROW
BEGIN
    INSERT INTO audit_trade (client_id, old_client_name, old_contact_number, old_email, action_type)
    VALUES (OLD.client_id, OLD.client_name, OLD.contact_number, OLD.email, 'UPDATE');
END$$

-- Row-level trigger for deletions
CREATE TRIGGER track_delete_row
AFTER DELETE ON clientmstr
FOR EACH ROW
BEGIN
    INSERT INTO audit_trade (client_id, old_client_name, old_contact_number, old_email, action_type)
    VALUES (OLD.client_id, OLD.client_name, OLD.contact_number, OLD.email, 'DELETE');
END$$

DELIMITER ;

DELIMITER $$

-- Statement-level trigger for updates
CREATE TRIGGER track_update_statement
AFTER UPDATE ON clientmstr
FOR EACH STATEMENT
BEGIN
    DECLARE client_cursor CURSOR FOR SELECT client_id, client_name, contact_number, email FROM clientmstr WHERE client_id IN (SELECT client_id FROM clientmstr);
    OPEN client_cursor;
    FETCH client_cursor INTO @client_id, @client_name, @contact_number, @email;
    
    WHILE FOUND() DO
        INSERT INTO audit_trade (client_id, old_client_name, old_contact_number, old_email, action_type)
        VALUES (@client_id, @client_name, @contact_number, @email, 'UPDATE');
        FETCH client_cursor INTO @client_id, @client_name, @contact_number, @email;
    END WHILE;
    CLOSE client_cursor;
END$$

-- Statement-level trigger for deletions
CREATE TRIGGER track_delete_statement
AFTER DELETE ON clientmstr
FOR EACH STATEMENT
BEGIN
    DECLARE client_cursor CURSOR FOR SELECT client_id, client_name, contact_number, email FROM clientmstr WHERE client_id IN (SELECT client_id FROM clientmstr);
    OPEN client_cursor;
    FETCH client_cursor INTO @client_id, @client_name, @contact_number, @email;
    
    WHILE FOUND() DO
        INSERT INTO audit_trade (client_id, old_client_name, old_contact_number, old_email, action_type)
        VALUES (@client_id, @client_name, @contact_number, @email, 'DELETE');
        FETCH client_cursor INTO @client_id, @client_name, @contact_number, @email;
    END WHILE;
    CLOSE client_cursor;
END$$

DELIMITER ;

