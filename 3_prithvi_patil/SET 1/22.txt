use DYPIT; // Switch to or create the database

Teachers Collection

db.Teachers.insertMany([
    { Tname: "Praveen", dno: 101, dname: "Computer", experience: 5, salary: 30000, date_of_joining: new Date("2018-01-15") },
    { Tname: "Rajesh", dno: 102, dname: "IT", experience: 7, salary: 25000, date_of_joining: new Date("2016-05-20") },
    { Tname: "Suresh", dno: 103, dname: "E&TC", experience: 3, salary: 20000, date_of_joining: new Date("2019-07-10") },
    { Tname: "Anita", dno: 104, dname: "Computer", experience: 8, salary: 35000, date_of_joining: new Date("2015-03-12") }
]);

students Collection

db.Students.insertMany([
    { Sname: "Alice", roll_no: 2, class: "10A" },
    { Sname: "xyz", roll_no: 25, class: "10B" },
    { Sname: "Bob", roll_no: 35, class: "10A" }
]);

1.
db.Teachers.aggregate([
    { $group: { _id: "$dname", avgSalary: { $avg: "$salary" } } }
]);

2.
db.Teachers.aggregate([
    { $group: { _id: "$dname", employeeCount: { $sum: 1 } } }
]);

3.
db.Teachers.aggregate([
    { $group: { _id: "$dname", totalSalary: { $sum: "$salary" } } },
    { $match: { totalSalary: { $gte: 50000 } } }
]);

4. Queries using operators like $max, $min, etc.

	a.Find the department with the maximum salary:

	db.Teachers.aggregate([
	    { $group: { _id: "$dname", maxSalary: { $max: "$salary" } } }
	]);

	b.Find the department with the minimum salary:

	db.Teachers.aggregate([
	    { $group: { _id: "$dname", minSalary: { $min: "$salary" } } }
	]);

	c.Find the total and average salary of all teachers:

	db.Teachers.aggregate([
	    { $group: { _id: null, totalSalary: { $sum: "$salary" }, avgSalary: { $avg: 	"$salary" } } }
	]);

5. Create a unique index on any field
For the roll_no field in the Students collection:

db.Students.createIndex({ roll_no: 1 }, { unique: true });

6. Create a compound index on any fields
For the dname and salary fields in the Teachers collection:

db.Teachers.createIndex({ dname: 1, salary: -1 });

7. Show all indexes created in the DYPIT database

db.getCollectionNames().forEach(function(collection) {
    print(`Indexes in collection ${collection}:`);
    printjson(db[collection].getIndexes());
});

8. Show all indexes created in the Teachers and Students collections
For the Teachers collection:

db.Teachers.getIndexes();

For the Students collection

db.Students.getIndexes();














